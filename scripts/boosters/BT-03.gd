# Content autogenerated. Data from wikimon.net

static func register_cards():

	CardDB.register_booster("BT-03", "BT-03: Union Impact")
	CardDB.add_card(BT3_001.new())
	CardDB.add_card(BT3_002.new())
	CardDB.add_card(BT3_003.new())
	CardDB.add_card(BT3_004.new())
	CardDB.add_card(BT3_005.new())
	CardDB.add_card(BT3_006.new())
	CardDB.add_card(BT3_007.new())
	CardDB.add_card(BT3_008.new())
	CardDB.add_card(BT3_009.new())
	CardDB.add_card(BT3_010.new())
	CardDB.add_card(BT3_011.new())
	CardDB.add_card(BT3_011_B.new())
	CardDB.add_card(BT3_012.new())
	CardDB.add_card(BT3_013.new())
	CardDB.add_card(BT3_014.new())
	CardDB.add_card(BT3_015.new())
	CardDB.add_card(BT3_016.new())
	CardDB.add_card(BT3_017.new())
	CardDB.add_card(BT3_018.new())
	CardDB.add_card(BT3_018_B.new())
	CardDB.add_card(BT3_019.new())
	CardDB.add_card(BT3_019_B.new())
	CardDB.add_card(BT3_020.new())
	CardDB.add_card(BT3_021.new())
	CardDB.add_card(BT3_022.new())
	CardDB.add_card(BT3_023.new())
	CardDB.add_card(BT3_024.new())
	CardDB.add_card(BT3_024_B.new())
	CardDB.add_card(BT3_025.new())
	CardDB.add_card(BT3_026.new())
	CardDB.add_card(BT3_027.new())
	CardDB.add_card(BT3_028.new())
	CardDB.add_card(BT3_029.new())
	CardDB.add_card(BT3_030.new())
	CardDB.add_card(BT3_030_B.new())
	CardDB.add_card(BT3_031.new())
	CardDB.add_card(BT3_031_B.new())
	CardDB.add_card(BT3_032.new())
	CardDB.add_card(BT3_033.new())
	CardDB.add_card(BT3_034.new())
	CardDB.add_card(BT3_035.new())
	CardDB.add_card(BT3_036.new())
	CardDB.add_card(BT3_036_B.new())
	CardDB.add_card(BT3_037.new())
	CardDB.add_card(BT3_038.new())
	CardDB.add_card(BT3_039.new())
	CardDB.add_card(BT3_040.new())
	CardDB.add_card(BT3_041.new())
	CardDB.add_card(BT3_042.new())
	CardDB.add_card(BT3_043.new())
	CardDB.add_card(BT3_043_B.new())
	CardDB.add_card(BT3_044.new())
	CardDB.add_card(BT3_045.new())
	CardDB.add_card(BT3_046.new())
	CardDB.add_card(BT3_047.new())
	CardDB.add_card(BT3_048.new())
	CardDB.add_card(BT3_049.new())
	CardDB.add_card(BT3_049_B.new())
	CardDB.add_card(BT3_050.new())
	CardDB.add_card(BT3_051.new())
	CardDB.add_card(BT3_052.new())
	CardDB.add_card(BT3_053.new())
	CardDB.add_card(BT3_054.new())
	CardDB.add_card(BT3_055.new())
	CardDB.add_card(BT3_056.new())
	CardDB.add_card(BT3_056_B.new())
	CardDB.add_card(BT3_057.new())
	CardDB.add_card(BT3_058.new())
	CardDB.add_card(BT3_059.new())
	CardDB.add_card(BT3_060.new())
	CardDB.add_card(BT3_061.new())
	CardDB.add_card(BT3_062.new())
	CardDB.add_card(BT3_063.new())
	CardDB.add_card(BT3_064.new())
	CardDB.add_card(BT3_065.new())
	CardDB.add_card(BT3_065_B.new())
	CardDB.add_card(BT3_066.new())
	CardDB.add_card(BT3_067.new())
	CardDB.add_card(BT3_068.new())
	CardDB.add_card(BT3_069.new())
	CardDB.add_card(BT3_070.new())
	CardDB.add_card(BT3_071.new())
	CardDB.add_card(BT3_072.new())
	CardDB.add_card(BT3_073.new())
	CardDB.add_card(BT3_073_B.new())
	CardDB.add_card(BT3_074.new())
	CardDB.add_card(BT3_075.new())
	CardDB.add_card(BT3_075_B.new())
	CardDB.add_card(BT3_076.new())
	CardDB.add_card(BT3_077.new())
	CardDB.add_card(BT3_078.new())
	CardDB.add_card(BT3_079.new())
	CardDB.add_card(BT3_080.new())
	CardDB.add_card(BT3_081.new())
	CardDB.add_card(BT3_082.new())
	CardDB.add_card(BT3_082_B.new())
	CardDB.add_card(BT3_083.new())
	CardDB.add_card(BT3_084.new())
	CardDB.add_card(BT3_085.new())
	CardDB.add_card(BT3_086.new())
	CardDB.add_card(BT3_087.new())
	CardDB.add_card(BT3_088.new())
	CardDB.add_card(BT3_089.new())
	CardDB.add_card(BT3_090.new())
	CardDB.add_card(BT3_090_B.new())
	CardDB.add_card(BT3_091.new())
	CardDB.add_card(BT3_091_B.new())
	CardDB.add_card(BT3_092.new())
	CardDB.add_card(BT3_093.new())
	CardDB.add_card(BT3_094.new())
	CardDB.add_card(BT3_095.new())
	CardDB.add_card(BT3_096.new())
	CardDB.add_card(BT3_097.new())
	CardDB.add_card(BT3_098.new())
	CardDB.add_card(BT3_099.new())
	CardDB.add_card(BT3_100.new())
	CardDB.add_card(BT3_101.new())
	CardDB.add_card(BT3_102.new())
	CardDB.add_card(BT3_103.new())
	CardDB.add_card(BT3_104.new())
	CardDB.add_card(BT3_105.new())
	CardDB.add_card(BT3_106.new())
	CardDB.add_card(BT3_107.new())
	CardDB.add_card(BT3_108.new())
	CardDB.add_card(BT3_109.new())
	CardDB.add_card(BT3_110.new())
	CardDB.add_card(BT3_111.new())
	CardDB.add_card(BT3_111_B.new())
	CardDB.add_card(BT3_112.new())
	CardDB.add_card(BT3_112_B.new())

class BT3_001 extends Card:
	func _init():
		name = "Poromon"
		type = Type.DIGITAMA
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-001"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Mini Bird"
		inherited_effect_text = "[When Attacking] Delete 1 of your opponent's Digimon with 1000 DP or less."

class BT3_002 extends Card:
	func _init():
		name = "DemiVeemon"
		type = Type.DIGITAMA
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-002"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Baby Dragon"
		inherited_effect_text = "[When Attacking] [Once Per Turn] If this Digimon has [Jamming], trigger [Draw 1]."
		notes = "Chibimon"

class BT3_003 extends Card:
	func _init():
		name = "Upamon"
		type = Type.DIGITAMA
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-003"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Amphibian"
		inherited_effect_text = "[When Attacking] [Once Per Turn] If you have 3 or fewer security cards, trigger [Draw 1]."
		notes = "ウパモン"

class BT3_004 extends Card:
	func _init():
		name = "Minomon"
		type = Type.DIGITAMA
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-004"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Larva"
		inherited_effect_text = "[When Attacking] If you attack one of your opponent's Digimon, this Digimon gets +1000 DP for the turn."
		ruling = [
					"I attacked my opponent with a Digimon with this card as one of its digivolution cards, and it was blocked. In this situation, does this card's effect activate?",
					"No, if you declared that you will be attacking your opponent, and your opponent decides to block your attack, resulting in a battle between Digimon, the effect does not activate.",
]

class BT3_005 extends Card:
	func _init():
		name = "Kakkinmon"
		type = Type.DIGITAMA
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-005"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Armor"
		inherited_effect_text = "[When Attacking] [Once Per Turn] If this Digimon is level 7, gain 1 memory."

class BT3_006 extends Card:
	func _init():
		name = "DemiMeramon"
		type = Type.DIGITAMA
		color = ColorGroup.PURPLE
		rarity = Rarity.U
		id = "BT3-006"
		level = 2
		stage_level = Stage.IN_TRAINING
		digimon_type = "Flame"
		inherited_effect_text = "[On Deletion] Trigger [Draw 1]. Then, trash 1 card in your hand."
		notes = "PetiMeramon"

class BT3_007 extends Card:
	func _init():
		name = "Agumon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-007"
		play_cost = 2
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 1
		digivolve_level = 2
		digimon_type = "Reptile"
		power = 4000

class BT3_008 extends Card:
	func _init():
		name = "Zubamon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-008"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Weapon"
		power = 1000
		effect_text = "[On Play] Reveal the top 5 cards of your deck. Add 1 [RagnaLoardmon] Digimon card and 1 Digimon card with [Legend-Arms] in its type among them to your hand. Place the remaining cards on the bottom of your deck in any order."
		ruling = [
					"If the cards I reveal from my deck include only either [RagnaLoardmon] or cards with [Legend-Arms] in their types, can I only add 1 card to my hand?",
					"Yes, if you only reveal one or the other, you only get to add one card to your hand.",
					"If the cards I reveal from my deck include 2 [RagnaLoardmon] cards with [Legend-Arms] in their types, can I add both of those cards to my hand?",
					"Yes, you may add them both to your hand.",
					"If the cards I reveal from my deck include both a [RagnaLoardmon] card and a card with [Legend-Arms] in its type, do I only get to add 1 to my hand and have to return the rest to the bottom of my deck?",
					"No, this effect allows you to add both cards.",
]

class BT3_009 extends Card:
	func _init():
		name = "Hawkmon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-009"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Avian"
		power = 4000
		notes = "ホークモン"

class BT3_010 extends Card:
	func _init():
		name = "ZubaEagermon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-010"
		play_cost = 4
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Weapon"
		power = 4000
		inherited_effect_text = "[Your Turn] While this Digimon is level 7, it gains \n[Security Attack +1]."

class BT3_011 extends Card:
	func _init():
		name = "Greymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-011"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Dinosaur"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]

class BT3_011_B extends Card:
	func _init():
		name = "Greymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-011 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Dinosaur"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_012 extends Card:
	func _init():
		name = "Aquilamon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-012"
		play_cost = 6
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Giant Bird"
		power = 5000
		inherited_effect_text = "[When Attacking] Delete 1 of your opponent's Digimon with 2000 DP or less."

class BT3_013 extends Card:
	func _init():
		name = "Duramon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-013"
		play_cost = 6
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Weapon"
		power = 7000
		inherited_effect_text = "[Your Turn] While this Digimon is level 7, it gains \n[Security Attack +1]."

class BT3_014 extends Card:
	func _init():
		name = "Silphymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.R
		id = "BT3-014"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 4
		digivolve_color_2 = ColorGroup.YELLOW
		digivolve_cost_2 = 3
		digivolve_level_2 = 4
		digimon_type = "Beastkin"
		power = 7000
		effect_text = "[When Digivolved] Change the original DP of 1 of your opponent's level 4 or lower Digimon to 1000 for the turn.\n[Your Turn] This Digimon is also treated as yellow."
		ruling = [
					"Can this Digimon Digivolve into a Digimon which has a Digivolution requirement of \"Yellow, Level 5?\"",
					"Yes, since this Digimon is treated as both red and yellow during your turn, it can digivolve into a Digimon with a digivolution requirement of \"Yellow, Level 5.\"",
					"What does \"Original DP\" mean?",
					"The DP value printed on a card is its original DP. This card's [When Digivolved] effect causes a target Digimon's DP, regardless of what's written on the card, to be temporarily treated as having 1000 DP.",
					"If this card's [When Digivolved] effect is used on an opponent's Digimon whose DP has been reduced by 1000 by an effect, what happens to that Digimon?",
					"Your opponent's Digimon's DP will be overwritten as 1000, and if a -1000 DP effect is being applied to it, its DP becomes 0, causing the Digimon to be deleted.",
]

class BT3_015 extends Card:
	func _init():
		name = "MetalGreymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.R
		id = "BT3-015"
		play_cost = 8
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Cyborg"
		power = 7000
		effect_text = "[Piercing].\n[When Digivolved] You may return 1 level 7 Digimon with [Virus] in its attribute from your trash to your hand."

class BT3_016 extends Card:
	func _init():
		name = "Durandamon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.R
		id = "BT3-016"
		play_cost = 10
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 3
		digivolve_level_2 = 5
		digimon_type = "Holy Sword"
		power = 12000
		inherited_effect_text = "[Piercing]."

class BT3_017 extends Card:
	func _init():
		name = "Valkyrimon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-017"
		play_cost = 11
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Warrior"
		power = 9000
		effect_text = "[When Digivolved] Delete 1 of your opponent's Digimon with 4000 DP or less.\n[When Attacking] Delete 1 of your opponent's Digimon with 4000 DP or less."

class BT3_018 extends Card:
	func _init():
		name = "BlitzGreymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.SR
		id = "BT3-018"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Cyborg"
		power = 12000
		effect_text = "[Piercing].\n[When Digivolved] Trigger [De-Digivolve 2]."

class BT3_018_B extends Card:
	func _init():
		name = "BlitzGreymon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.SR
		id = "BT3-018 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Cyborg"
		power = 12000
		effect_text = "[Piercing].\n[When Digivolved] Trigger [De-Digivolve 2]."
		is_parallel = true
		notes = "parallel promo"

class BT3_019 extends Card:
	func _init():
		name = "RagnaLoardmon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.SR
		id = "BT3-019"
		play_cost = 14
		level = 7
		stage_level = ""
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 6
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 3
		digivolve_level_2 = 6
		digimon_type = "Unique"
		power = 14000
		effect_text = "[Security Attack +].\n[Reboot].\n[When Digivolved] You may place 1 [Durandamon] or [BryweLudramon] from your hand on top of this card's digivolution cards to gain 3 memory."
		ruling = [
					"Do I have to activate this card's [When Digivolved] effect if I have either [Durandamon] or [BryweLudramon] in my hand?",
					"No, you can choose whether or not to activate this card's [When Digivolved] effect.",
					"For this card's [When Digivolved] effect, how are either the [Durandamon] or [BryweLudramon] cards in your hand placed?",
					"The relevant card is placed directly under this card, or at the very top of this card's digivolution cards.",
					"Paying this Digimon's digivolution cost resulted in the memory counter being placed at 1 or above on my opponent's side. However, the [When Digivolved] effect allowed me to gain 3 memory, putting the memory counter at 0 or above on my side. When this happens, does the turn end?",
					"No, even if the memory counter moves to 1 or greater on your opponent's side temporarily, if by resolving that effect, the memory counter moves back to 0 or greater on your side, your turn may continue.",
]

class BT3_019_B extends Card:
	func _init():
		name = "RagnaLoardmon"
		type = Type.DIGIMON
		color = ColorGroup.RED
		rarity = Rarity.SR
		id = "BT3-019 (B)"
		play_cost = 14
		level = 7
		stage_level = ""
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 3
		digivolve_level = 6
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 3
		digivolve_level_2 = 6
		digimon_type = "Unique"
		power = 14000
		effect_text = "[Security Attack +].\n[Reboot].\n[When Digivolved] You may place 1 [Durandamon] or [BryweLudramon] from your hand on top of this card's digivolution cards to gain 3 memory."
		ruling = [
					"Do I have to activate this card's [When Digivolved] effect if I have either [Durandamon] or [BryweLudramon] in my hand?",
					"No, you can choose whether or not to activate this card's [When Digivolved] effect.",
					"For this card's [When Digivolved] effect, how are either the [Durandamon] or [BryweLudramon] cards in your hand placed?",
					"The relevant card is placed directly under this card, or at the very top of this card's digivolution cards.",
					"Paying this Digimon's digivolution cost resulted in the memory counter being placed at 1 or above on my opponent's side. However, the [When Digivolved] effect allowed me to gain 3 memory, putting the memory counter at 0 or above on my side. When this happens, does the turn end?",
					"No, even if the memory counter moves to 1 or greater on your opponent's side temporarily, if by resolving that effect, the memory counter moves back to 0 or greater on your side, your turn may continue.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_020 extends Card:
	func _init():
		name = "Patamon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.C
		id = "BT3-020"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mammal"
		power = 4000

class BT3_021 extends Card:
	func _init():
		name = "Veemon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.R
		id = "BT3-021"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mini Dragon"
		power = 2000
		effect_text = "[Jamming]."
		notes = "V-mon"

class BT3_022 extends Card:
	func _init():
		name = "Penguinmon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.C
		id = "BT3-022"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 1
		digivolve_level = 2
		digimon_type = "Avian"
		power = 5000
		notes = "Penmon"

class BT3_023 extends Card:
	func _init():
		name = "Angemon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.C
		id = "BT3-023"
		play_cost = 4
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Angel"
		power = 3000
		inherited_effect_text = "[When Attacking] Trash the bottom digivolution card of 1 of your opponent's Digimon."

class BT3_024 extends Card:
	func _init():
		name = "Airdramon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-024"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Mythical Beast"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]

class BT3_024_B extends Card:
	func _init():
		name = "Airdramon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-024 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Mythical Beast"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_025 extends Card:
	func _init():
		name = "ExVeemon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.R
		id = "BT3-025"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Mythical Beast"
		power = 4000
		effect_text = "[When Digivolved] Unsuspend 1 of your level 4 or lower Digimon."
		notes = "XV-mon"

class BT3_026 extends Card:
	func _init():
		name = "MagnaAngemon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.C
		id = "BT3-026"
		play_cost = 6
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Archangel"
		power = 7000
		inherited_effect_text = "[When Attacking] Trash the bottom digivolution card of 1 of your opponent's Digimon."
		notes = "HolyAngemon"

class BT3_027 extends Card:
	func _init():
		name = "Paildramon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.R
		id = "BT3-027"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 3
		digivolve_level = 4
		digivolve_color_2 = ColorGroup.GREEN
		digivolve_cost_2 = 3
		digivolve_level_2 = 4
		digimon_type = "Dragonkin"
		power = 7000
		effect_text = "[Jamming]."
		inherited_effect_text = "[When Attacking] [Once Per Turn] If this Digimon has [Imperialdramon], unsuspend it."
		ruling = [
					"I digivolve this card into [Imperialdramon: Dragon Mode] and attack with it deleting an opponent's in battle and surviving. I unsuspend it with its own effect. When I attack again, can I use this card's effect to unsuspend it?",
					"No, this card's inherited effect is compulsory like [Imperialdramon: Dragon Mode] so it cannot put [Imperialdramon: Dragon Mode] to active as the effect was already \"spent\" on the 1st attack.",
]

class BT3_028 extends Card:
	func _init():
		name = "Bastemon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-028"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 2
		digivolve_level = 4
		digimon_type = "Beastkin"
		power = 8000

class BT3_029 extends Card:
	func _init():
		name = "Goldramon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-029"
		play_cost = 11
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Holy Dragon"
		power = 11000
		effect_text = "[Your Turn] [Once Per Turn] When you play another Digimon, unsuspend this Digimon."
		notes = "Goddramon"

class BT3_030 extends Card:
	func _init():
		name = "Leopardmon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.SR
		id = "BT3-030"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 4
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 11000
		effect_text = "[When Digivolved] You may play 1 level 4 or lower digivolution card of 1 of your Digimon cards as another Digimon without paying its memory cost.\n[Your Turn] All of your level 4 or lower Digimon gain [Jamming]."
		ruling = [
					"Do I have to use this  card's [When Digivolved] effect?",
					"No, you can choose not to  use it.",
					"Can I use this card's  [When Digivolved] effect on a Level 4 Digimon card that's part of this  card's digivolution cards?",
					"Yes, you can.",
					"Will this card's [Your Turn] effect result in my Level 4 Digimon with [Jamming] losing [Jamming] when Digivolving to Level 5 or above?",
					"Yes, because the effect is  only active during [Your Turn], the moment the Digimon becomes Level 5 or  above, the effect no longer applies to the Digimon, and it will lose  [Jamming].",
]
		notes = "Duftmon"

class BT3_030_B extends Card:
	func _init():
		name = "Leopardmon"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.SR
		id = "BT3-030 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 4
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 11000
		effect_text = "[When Digivolved] You may play 1 level 4 or lower digivolution card of 1 of your Digimon cards as another Digimon without paying its memory cost.\n[Your Turn] All of your level 4 or lower Digimon gain [Jamming]."
		ruling = [
					"Do I have to use this  card's [When Digivolved] effect?",
					"No, you can choose not to  use it.",
					"Can I use this card's  [When Digivolved] effect on a Level 4 Digimon card that's part of this  card's digivolution cards?",
					"Yes, you can.",
					"Will this card's [Your Turn] effect result in my Level 4 Digimon with [Jamming] losing [Jamming] when Digivolving to Level 5 or above?",
					"Yes, because the effect is  only active during [Your Turn], the moment the Digimon becomes Level 5 or  above, the effect no longer applies to the Digimon, and it will lose  [Jamming].",
]
		is_parallel = true
		notes = "parallel promo Duftmon"

class BT3_031 extends Card:
	func _init():
		name = "Imperialdramon Dragon Mode"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.SR
		id = "BT3-031"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 5
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.GREEN
		digivolve_cost_2 = 5
		digivolve_level_2 = 5
		digimon_type = "Ancient Dragon"
		power = 12000
		effect_text = "When one of your [Paildramon] or [Dinobeemon] would digivolve into this card in your hand, reduce the memory cost of the digivolution by 2.\n[Jamming].\n[When Digivolved] Unsuspend all of your Digimon with [Jamming]."
		ruling = [
					"When digivolving this card onto a [Paildramon] or [Dinobeemon] in my breeding area, can I reduce the digivolution cost by 2?",
					"No. You can't activate this effect when digivolving a card in your breeding area.",
]

class BT3_031_B extends Card:
	func _init():
		name = "Imperialdramon Dragon Mode"
		type = Type.DIGIMON
		color = ColorGroup.BLUE
		rarity = Rarity.SR
		id = "BT3-031 (B)"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.BLUE
		digivolve_cost = 5
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.GREEN
		digivolve_cost_2 = 5
		digivolve_level_2 = 5
		digimon_type = "Ancient Dragon"
		power = 12000
		effect_text = "When one of your [Paildramon] or [Dinobeemon] would digivolve into this card in your hand, reduce the memory cost of the digivolution by 2.\n[Jamming].\n[When Digivolved] Unsuspend all of your Digimon with [Jamming]."
		ruling = [
					"When digivolving this card onto a [Paildramon] or [Dinobeemon] in my breeding area, can I reduce the digivolution cost by 2?",
					"No. You can't activate this effect when digivolving a card in your breeding area.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_032 extends Card:
	func _init():
		name = "Armadillomon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.C
		id = "BT3-032"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mammal"
		power = 4000
		notes = "Armadimon"

class BT3_033 extends Card:
	func _init():
		name = "Salamon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.R
		id = "BT3-033"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mammal"
		power = 1000
		inherited_effect_text = "[When Attacking] 1 of your opponent's Digimon gets -1000 DP for the turn."
		notes = "Plotmon"

class BT3_034 extends Card:
	func _init():
		name = "Lopmon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-034"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Beast"
		power = 2000
		effect_text = "[On Play] Look at the top card of your security stack. You may add that card to your hand to trigger [Draw 1]."
		ruling = [
					"After checking the top security card using this card's effect, if that card cannot be added to my hand, what happens to that card?",
					"It's placed at the top of the security stack, face down.",
					"If I check my top security card using this card's effect and add it to my hand, do I have to reveal it to my opponent?",
					"No, you don't.",
					"When I have 0 cards left in my security stack, can I still [Draw 1] as a result of this card's effect?",
					"No, you can only [Draw 1] if you add a security card to your hand.",
					"When I have 0 cards left in my deck, can I still look at one of my security cards and add it to my hand?",
					"Yes, the latter half of the effect, \"Look at the top card of your security stack. You may add that card to your hand to trigger-\" can still be activated even if you have 0 cards in your deck and [Draw 1] cannot be resolved.",
]

class BT3_035 extends Card:
	func _init():
		name = "Gatomon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.C
		id = "BT3-035"
		play_cost = 4
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Holy Beast"
		power = 3000
		inherited_effect_text = "[When Attacking] 1 of your opponent's Digimon gets -1000 DP for the turn."
		notes = "Tailmon"

class BT3_036 extends Card:
	func _init():
		name = "Ankylomon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-036"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Ankylosaur"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]

class BT3_036_B extends Card:
	func _init():
		name = "Ankylomon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-036 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Ankylosaur"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_037 extends Card:
	func _init():
		name = "Turuiemon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.C
		id = "BT3-037"
		play_cost = 6
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 1
		digivolve_level = 3
		digimon_type = "Beastkin"
		power = 6000

class BT3_038 extends Card:
	func _init():
		name = "Antylamon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.C
		id = "BT3-038"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 2
		digivolve_level = 4
		digimon_type = "Holy Beast"
		power = 8000
		notes = "Andiramon"

class BT3_039 extends Card:
	func _init():
		name = "Angewomon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.R
		id = "BT3-039"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Archangel"
		power = 6000
		effect_text = "[When Digivolved] 1 of your opponent's Digimon gains [Security Attack -2] until the end of your opponent's next turn."
		inherited_effect_text = "[When Attacking] If you have 3 or fewer security cards, you may play 1 yellow level 3 Digimon card from your hand without paying its memory cost."

class BT3_040 extends Card:
	func _init():
		name = "Shakkoumon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.R
		id = "BT3-040"
		play_cost = 8
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 4
		digivolve_color_2 = ColorGroup.BLUE
		digivolve_cost_2 = 3
		digivolve_level_2 = 4
		digimon_type = "Mutant"
		power = 7000
		effect_text = "[Your Turn] This Digimon is also treated as blue.\n[Opponent Turn] All of your opponent's Digimon with no digivolution cards gain [Security Attack -1]."
		ruling = [
					"Can this Digimon digivolve into a Digimon with a digivolution condition of \"Blue, Level 5\"?",
					"Yes, since this Digimon is treated as both yellow and blue during your turn, it can digivolve into a Digimon with a requirement of \"Blue, Level 5.\"",
					"My opponent has this Digimon in play. If I digivolve one of my Digimon that currently has no digivolution cards, does its [Security Attack -1] immediately disappear?",
					"Yes, the moment your Digimon gains a digivolution card, it no longer counts as a \"Digimon with no digivolution cards,\" and loses [Security Attack -1].",
					"I play [Shakkoumon] while I have [Matt Ishida] does its effect activate?",
					"Yes, [Shakkoumon]'s effect allows it to be played as a Blue Digimon.",
]

class BT3_041 extends Card:
	func _init():
		name = "Cherubimon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.R
		id = "BT3-041"
		play_cost = 11
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Cherub"
		power = 11000
		effect_text = "[When Attacking] If you have 3 or fewer security cards, place 1 yellow Digimon from your trash on top of your security stack face down."
		ruling = [
					"When using this card's effect to place a yellow Digimon card from your trash on your security stack, do I need to show that card to my opponent?",
					"Yes, when moving a card from your trash to your security stack, you must show the card to your opponent so they can confirm it's a yellow Digimon card.",
]

class BT3_042 extends Card:
	func _init():
		name = "ClavisAngemon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-042"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Virtue"
		power = 10000
		effect_text = "[When Attacking] If you have 3 or fewer security cards, 1 of your opponent's Digimon gets -6000 DP for the turn."
		ruling = [
					"I use this card's effect to give my opponent's Digimon 6000 DP. Later in the turn, I end up with 4 cards in my security stack. Does the -6000 DP effect go away?",
					"No, even if you end up with 4 or more security cards, the Digimon will have -6000 DP for the duration of the turn in which the effect was activated.",
]

class BT3_043 extends Card:
	func _init():
		name = "Kentaurosmon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.SR
		id = "BT3-043"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 11000
		effect_text = "[When Digivolved] Up to 5 of your opponent's Digimon gain [Security Attack -2] until the end of your opponent's next turn.[On Deletion] 1 of your opponent's Digimon gets -11000 DP for the turn."
		notes = "Sleipmon"

class BT3_043_B extends Card:
	func _init():
		name = "Kentaurosmon"
		type = Type.DIGIMON
		color = ColorGroup.YELLOW
		rarity = Rarity.SR
		id = "BT3-043 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.YELLOW
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 11000
		effect_text = "[When Digivolved] Up to 5 of your opponent's Digimon gain [Security Attack -2] until the end of your opponent's next turn.[On Deletion] 1 of your opponent's Digimon gets -11000 DP for the turn."
		is_parallel = true
		notes = "parallel promo Sleipmon"

class BT3_044 extends Card:
	func _init():
		name = "Aruraumon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-044"
		play_cost = 2
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 2
		digimon_type = "Vegetation"
		power = 5000

class BT3_045 extends Card:
	func _init():
		name = "Kunemon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-045"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 2
		digimon_type = "Larva"
		power = 4000

class BT3_046 extends Card:
	func _init():
		name = "Terriermon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-046"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 2
		digimon_type = "Beast"
		power = 2000
		effect_text = "[All Turns] Your opponent can't gain memory except with Tamer effects."
		ruling = [
					"My opponent has this card in play when I activate the effect on a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. What happens?",
					"You can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
					"My opponent has this card in play. Do I gain memory from [Hammer Spark]'s [Security] effect?",
					"No, you don't gain any memory from it.",
					"I have [Terriermon] in play and my opponent has [MaloMyotismon]. My opponent plays [Kimeramon] and destroys of their Digimon and Terriermon. Does my opponent gain memory with [MaloMyotismon]'s effect?",
					"Yes, Terriermon's effect is no longer active when MaloMyotismon's effect resolves.",
					"I have this card in play and use the effect of a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. Does my opponent still gain memory from my card effect?",
					"Your opponent can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
]

class BT3_047 extends Card:
	func _init():
		name = "Wormmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.R
		id = "BT3-047"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 2
		digimon_type = "Larva"
		power = 1000
		effect_text = "[On Deletion] Reveal the top 3 cards of your deck. Add 1 level 4 or 5 Digimon card among them to your hand. Place the remaining cards on the bottom of your deck in any order."

class BT3_048 extends Card:
	func _init():
		name = "Gargomon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-048"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 1
		digivolve_level = 3
		digimon_type = "Beastkin"
		power = 4000
		inherited_effect_text = "[Your Turn] This card gets +1000 DP for each of your opponent's suspended Digimon."

class BT3_049 extends Card:
	func _init():
		name = "Flymon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-049"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Insectoid"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]

class BT3_049_B extends Card:
	func _init():
		name = "Flymon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-049 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Insectoid"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_050 extends Card:
	func _init():
		name = "Stingmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.R
		id = "BT3-050"
		play_cost = 6
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Insectoid"
		power = 5000
		inherited_effect_text = "[Your Turn] [Once Per Turn] When this Digimon deletes an opponent's Digimon in battle and survives, gain 1 memory."

class BT3_051 extends Card:
	func _init():
		name = "Dokugumon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-051"
		play_cost = 6
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Insectoid"
		power = 5000
		effect_text = "[On Play] Reveal the top 3 cards of your deck. Add 1 level 5 or 6 Digimon card among them to your hand. Trash the remaining cards."
		ruling = [
					"The cards I reveal with this effect include only a level 5 or level 6 Digimon, not both. Can I add that card to my hand?",
					"Yes, even if you only reveal one of the applicable cards, you can still add it to your hand.",
]

class BT3_052 extends Card:
	func _init():
		name = "Rapidmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-052"
		play_cost = 6
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 2
		digivolve_level = 4
		digimon_type = "Cyborg"
		power = 6000
		inherited_effect_text = "[Your Turn] This card gets +1000 DP for each of your opponent's suspended Digimon."

class BT3_053 extends Card:
	func _init():
		name = "JewelBeemon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-053"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 4
		digivolve_level = 4
		digimon_type = "Insectoid"
		power = 10000

class BT3_054 extends Card:
	func _init():
		name = "Blossomon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-054"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Vegetation"
		power = 7000
		effect_text = "[Digisorption -3]."

class BT3_055 extends Card:
	func _init():
		name = "Dinobeemon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.R
		id = "BT3-055"
		play_cost = 8
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 3
		digivolve_level = 4
		digivolve_color_2 = ColorGroup.BLUE
		digivolve_cost_2 = 3
		digivolve_level_2 = 4
		digimon_type = "Mutant"
		power = 7000
		effect_text = "[Piercing].\n[Jamming]."

class BT3_056 extends Card:
	func _init():
		name = "Ceresmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.SR
		id = "BT3-056"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 5
		digivolve_level = 5
		digimon_type = "Shaman"
		power = 12000
		effect_text = "[Digisorption -3].\n[Your Turn] [Once Per Turn] When suspending Digimon for a [Digisorption -|support] effect, you may suspend your opponent's Digimon instead."
		ruling = [
					"Can I use this card's [Your Turn] effect to suspend an opponent's Digimon for this card's [Digisorption -3]?",
					"No, you cannot. Its [Your Turn] effect is only active when this card is in play in the battle area.",
]

class BT3_056_B extends Card:
	func _init():
		name = "Ceresmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.SR
		id = "BT3-056 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 5
		digivolve_level = 5
		digimon_type = "Shaman"
		power = 12000
		effect_text = "[Digisorption -3].\n[Your Turn] [Once Per Turn] When suspending Digimon for a [Digisorption -|support] effect, you may suspend your opponent's Digimon instead."
		ruling = [
					"Can I use this card's [Your Turn] effect to suspend an opponent's Digimon for this card's [Digisorption -3]?",
					"No, you cannot. Its [Your Turn] effect is only active when this card is in play in the battle area.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_057 extends Card:
	func _init():
		name = "MegaGargomon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.R
		id = "BT3-057"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 4
		digivolve_level = 5
		digimon_type = "Machine"
		power = 11000
		effect_text = "[When Digivolved] Suspend 1 of your opponent's Digimon. It doesn't unsuspend during your opponent's next unsuspend phase.\n[Your Turn] While your opponent has a suspended Digimon in play, this Digimon gains [Security Attack +1]."
		ruling = [
					"Using this card's [When Digivolved] effect, can I prevent my opponent's Digimon from becoming unsuspended during my opponent's next unsuspend phase by applying this effect to it while it's suspended?",
					"Yes, you can.",
]
		notes = "SaintGalgomon"

class BT3_058 extends Card:
	func _init():
		name = "BanchoStingmon"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-058"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.FREE
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Insectoid"
		power = 9000
		effect_text = "[Piercing].\n[When Attacking] If you attack an opponent's Digimon that has 12000 DP or more, this Digimon gets +7000 DP and [Security Attack +2] for the turn."
		ruling = [
					"I have activated [Golden Ripper] and attack with [BanchoStingmon]. If I attack with this card and use [Golden Ripper]'s effect to decrease the attack of the attack target from 12000 DP to 10000 DP before I use its effect, can I use this card's effect to give it 7000 DP?",
					"Yes, you can still use BanchoStingmon's effect if the attack target's DP decreases before BanchoStingmon's effect activates as long as it was 12000 DP when it was targeted for the attack.",
]

class BT3_059 extends Card:
	func _init():
		name = "Commandramon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-059"
		play_cost = 2
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Cyborg"
		power = 3000

class BT3_060 extends Card:
	func _init():
		name = "Psychemon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-060"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 1
		digivolve_level = 2
		digimon_type = "Reptile"
		power = 5000

class BT3_061 extends Card:
	func _init():
		name = "Chuumon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-061"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Beast"
		power = 1000
		effect_text = "[All Turns] Your opponent can't gain memory except with Tamer effects."
		ruling = [
					"My opponent has this card in play when I activate the effect on a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. What happens?",
					"You can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
					"My opponent has this card in play. Do I gain memory from [Hammer Spark]'s [Security] effect?",
					"No, you don't gain any memory from it.",
					"I have [Chuumon] in play and my opponent has [MaloMyotismon]. My opponent plays [Kimeramon] and destroys of their Digimon and Chuumon. Does my opponent gain memory with [MaloMyotismon]'s effect?",
					"Yes, Chuumon's effect is no longer active when MaloMyotismon's effect resolves.",
					"I have this card in play and use the effect of a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. Does my opponent still gain memory from my card effect?",
					"Your opponent can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
]

class BT3_062 extends Card:
	func _init():
		name = "Ludomon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-062"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Armor"
		power = 1000
		effect_text = "[On Play] Reveal the top 5 cards of your deck. Add 1 [RagnaLoardmon] Digimon card and 1 Digimon card with [Legend-Arms] in its type among them to your hand. Place the remaining cards on the bottom of your deck in any order."
		ruling = [
					"If the cards I reveal from my deck include only either [RagnaLoardmon] or cards with [Legend-Arms] in their types, can I only add 1 card to my hand?",
					"Yes, if you only reveal one or the other, you only get to add one card to your hand.",
					"If the cards I reveal from my deck include 2 [RagnaLoardmon] cards with [Legend-Arms] in their types, can I add both of those cards to my hand?",
					"Yes, you may add them both to your hand.",
					"If the cards I reveal from my deck include both a [RagnaLoardmon] card and a card with [Legend-Arms] in its type, do I only get to add 1 to my hand and have to return the rest to the bottom of my deck?",
					"No, this effect allows you to add both cards.",
]

class BT3_063 extends Card:
	func _init():
		name = "Sukamon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-063"
		play_cost = 3
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Abnormal"
		power = 1000
		effect_text = "[On Deletion] Reveal the top 3 cards of your deck. You may play 1 [Chuumon] among them without paying its memory cost. Place the remaining cards on the bottom of your deck in any order."

class BT3_064 extends Card:
	func _init():
		name = "TiaLudomon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-064"
		play_cost = 4
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Armor"
		power = 4000
		inherited_effect_text = "[When Attacking] If this Digimon is level 7, trigger\n[De-Digivolve 1]."

class BT3_065 extends Card:
	func _init():
		name = "Gururumon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-065"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Beast"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]

class BT3_065_B extends Card:
	func _init():
		name = "Gururumon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-065 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Beast"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_066 extends Card:
	func _init():
		name = "Clockmon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-066"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Machine"
		power = 5000
		inherited_effect_text = "[Opponent Turn] This Digimon gets +1000 DP."

class BT3_067 extends Card:
	func _init():
		name = "Tankmon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-067"
		play_cost = 6
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 1
		digivolve_level = 3
		digimon_type = "Cyborg"
		power = 6000

class BT3_068 extends Card:
	func _init():
		name = "Giromon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-068"
		play_cost = 6
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Mine"
		power = 7000
		inherited_effect_text = "[Opponent Turn] This Digimon gets +1000 DP."

class BT3_069 extends Card:
	func _init():
		name = "RaijiLudomon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-069"
		play_cost = 6
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Armor"
		power = 7000
		inherited_effect_text = "[When Attacking] If this Digimon is level 7, trigger\n[De-Digivolve 1]."

class BT3_070 extends Card:
	func _init():
		name = "Etemon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.R
		id = "BT3-070"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Puppet"
		power = 6000
		effect_text = "[Blocker].\n[On Deletion] Reveal 5 cards from the top of your deck. You may play 1 level 6 Digimon card with [Etemon] among them. Place the remaining cards at the bottom of your deck in any order."

class BT3_071 extends Card:
	func _init():
		name = "MetalMamemon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.R
		id = "BT3-071"
		play_cost = 8
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Cyborg"
		power = 7000
		effect_text = "[Reboot].\n[When Digivolved] Return 1 level 7 Digimon card with [Virus] in its attribute from your trash to your hand."

class BT3_072 extends Card:
	func _init():
		name = "BryweLudramon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.R
		id = "BT3-072"
		play_cost = 10
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.RED
		digivolve_cost_2 = 3
		digivolve_level_2 = 5
		digimon_type = "Armor"
		power = 12000
		inherited_effect_text = "[Blocker]."

class BT3_073 extends Card:
	func _init():
		name = "CresGarurumon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.SR
		id = "BT3-073"
		play_cost = 11
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.RED
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Beast Knight"
		power = 11000
		effect_text = "[Reboot].\n[When Digivolved] Reveal 1 card from the top of your deck for each Digimon your opponent has in play. You may play 1 black or red Digimon card with a level of 5 or less among them without paying its memory cost. Place the remaining cards on the bottom of your deck in any order."

class BT3_073_B extends Card:
	func _init():
		name = "CresGarurumon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.SR
		id = "BT3-073 (B)"
		play_cost = 11
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.RED
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Beast Knight"
		power = 11000
		effect_text = "[Reboot].\n[When Digivolved] Reveal 1 card from the top of your deck for each Digimon your opponent has in play. You may play 1 black or red Digimon card with a level of 5 or less among them without paying its memory cost. Place the remaining cards on the bottom of your deck in any order."
		is_parallel = true
		notes = "parallel promo"

class BT3_074 extends Card:
	func _init():
		name = "MetalEtemon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-074"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Cyborg"
		power = 10000
		effect_text = "[Your Turn] This Digimon can't be blocked by your opponent's Digimon.\n[Opponent Turn] This Digimon gets +2000 DP."

class BT3_075 extends Card:
	func _init():
		name = "Craniamon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.SR
		id = "BT3-075"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 4
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 12000
		effect_text = "[Blocker].\n[All Turns] Your Digimon with [Blocker] can't be deleted by your opponent's effects."
		ruling = [
					"What does \"can't be deleted by your opponent's effects\" on this card's [All Turns] effect refer to, exactly?",
					"Card text that uses \"delete,\" such as \"Delete 1 of your opponent's Digimon,\" can't be used to delete your cards with [Blocker] They can still be deleted by losing battles or being reduced to zero DP.",
]

class BT3_075_B extends Card:
	func _init():
		name = "Craniamon"
		type = Type.DIGIMON
		color = ColorGroup.BLACK
		rarity = Rarity.SR
		id = "BT3-075 (B)"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.BLACK
		digivolve_cost = 4
		digivolve_level = 5
		digimon_type = "Holy Warrior"
		power = 12000
		effect_text = "[Blocker].\n[All Turns] Your Digimon with [Blocker] can't be deleted by your opponent's effects."
		ruling = [
					"What does \"can't be deleted by your opponent's effects\" on this card's [All Turns] effect refer to, exactly?",
					"Card text that uses \"delete,\" such as \"Delete 1 of your opponent's Digimon,\" can't be used to delete your cards with [Blocker] They can still be deleted by losing battles or being reduced to zero DP.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_076 extends Card:
	func _init():
		name = "Candlemon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-076"
		play_cost = 2
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Flame"
		power = 3000
		notes = "Candmon"

class BT3_077 extends Card:
	func _init():
		name = "Gazimon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-077"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mammal"
		power = 2000
		effect_text = "[All Turns] Your opponent can't gain memory except with Tamer effects."
		ruling = [
					"My opponent has this card in play when I activate the effect on a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. What happens?",
					"You can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
					"My opponent has this card in play. Do I gain memory from [Hammer Spark]'s [Security] effect?",
					"No, you don't gain any memory from it.",
					"I have [Terriermon] in play and my opponent has [MaloMyotismon]. My opponent plays [Kimeramon] and destroys of their Digimon and Terriermon. Does my opponent gain memory with [MaloMyotismon]'s effect?",
					"Yes, Terriermon's effect is no longer active when MaloMyotismon's effect resolves.",
					"I have this card in play and use the effect of a card like [Gravity Crush], [MetalGreymon], [WereGarurumon], [Chirinmon], or [Digitamamon]. Does my opponent still gain memory from my card effect?",
					"Your opponent can't use Option/Digimon card effects to gain memory, but you can still lose memory if a card effect specifies as such.",
]

class BT3_078 extends Card:
	func _init():
		name = "Shamanmon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-078"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Demon"
		power = 4000
		notes = "Shamamon"

class BT3_079 extends Card:
	func _init():
		name = "Tsukaimon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-079"
		play_cost = 3
		level = 3
		stage_level = Stage.ROOKIE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 0
		digivolve_level = 2
		digimon_type = "Mammal"
		power = 2000

class BT3_080 extends Card:
	func _init():
		name = "Saberdramon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-080"
		play_cost = 4
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Giant Bird"
		power = 3000
		inherited_effect_text = "[Retaliation]."

class BT3_081 extends Card:
	func _init():
		name = "Devidramon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.U
		id = "BT3-081"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Evil Dragon"
		power = 4000
		inherited_effect_text = "[On Deletion] Gain 1 memory."

class BT3_082 extends Card:
	func _init():
		name = "BlackGatomon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.U
		id = "BT3-082"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Dark Animal"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		notes = "BlackTailmon"

class BT3_082_B extends Card:
	func _init():
		name = "BlackGatomon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.U
		id = "BT3-082 (B)"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Dark Animal"
		power = 4000
		effect_text = "[Security] At the end of the battle, play this card without paying its memory cost."
		ruling = [
					"If I use this card's effect to play a Digimon, is it treated as a Security Digimon even in my battle area?",
					"No, it's treated as a normal Digimon once it comes into play.",
					"Can I play this Digimon with its [Security] effect even if it loses the battle against the attacking Digimon?",
					"Yes, regardless of the battle's outcome, you get to play this Digimon at the end of the battle.",
					"This card is flipped over during a security check, but the attacking Digimon still has security checks remaining. Is this card played off its [Security] effect first, or do I have to wait until my opponent finishes the rest of their security checks?",
					"This Digimon is played after the battle with the attacking Digimon, and before the next check is performed.",
]
		is_parallel = true
		notes = "parallel promo BlackTailmon"

class BT3_083 extends Card:
	func _init():
		name = "Meramon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-083"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 1
		digivolve_level = 3
		digimon_type = "Flame"
		power = 5000

class BT3_084 extends Card:
	func _init():
		name = "Raremon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-084"
		play_cost = 5
		level = 4
		stage_level = Stage.CHAMPION
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 3
		digimon_type = "Undead"
		power = 4000
		effect_text = "[On Play] Reveal the top 3 cards of your deck. Add 1 Option card among them to your hand. Trash the remaining cards."

class BT3_085 extends Card:
	func _init():
		name = "SkullMeramon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-085"
		play_cost = 5
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 4
		digimon_type = "Flame"
		power = 6000
		notes = "DeathMeramon"

class BT3_086 extends Card:
	func _init():
		name = "Arukenimon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-086"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 3
		digivolve_level = 4
		digivolve_color_2 = ColorGroup.GREEN
		digivolve_cost_2 = 3
		digivolve_level_2 = 4
		digimon_type = "Dark Animal"
		power = 6000
		effect_text = "[When Attacking] You may pay 3 memory to play 1 [MaloMyotismon] from your hand without paying its memory cost. Then, delete this Digimon."
		ruling = [
					"Do I have to use this card's [When Attacking] effect?",
					"No, you can choose not to use it.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. When this Digimon is deleted after this, what happens to the attack?",
					"The attacking Digimon was deleted, so the attack ends.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. This Digimon is then deleted, but can I still activate any [When Attacking] inherited effects on this card?",
					"Yes, you can. However, effects that can't be resolved unless the Digimon that activated them are in play, like \"unsuspend this Digimon,\" can't be activated.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. This Digimon is then deleted, but do I gain a memory from [MaloMyotismon] 's \"[All Turns] When another Digimon is deleted, gain 1 memory\" effect?",
					"Yes, [MaloMyotismon] is in play when this card is deleted, so you gain 1 memory.",
]

class BT3_087 extends Card:
	func _init():
		name = "Mummymon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-087"
		play_cost = 7
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Undead"
		power = 7000
		effect_text = "[When Attacking] You may pay 3 memory to play 1 [MaloMyotismon] from your hand without paying its memory cost. Then, delete this Digimon."
		ruling = [
					"Do I have to use this card's [When Attacking] effect?",
					"No, you can choose not to use it.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. When this Digimon is deleted after this, what happens to the attack?",
					"The attacking Digimon was deleted, so the attack ends.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. Can I then activate any [When Attacking] inherited effects on this card?",
					"Yes, you can. However, effects that can't be resolved unless the Digimon that activated them are in play, like \"unsuspend this Digimon,\" can't be activated.",
					"I attack with this card, and use its [When Attacking] effect to play [MaloMyotismon]. This Digimon is then deleted, but do I gain a memory from [MaloMyotismon] 's \"[All Turns] When another Digimon is deleted, gain 1 memory\" effect?",
					"Yes, BT3-92 [MaloMyotismon] is in play when this card is deleted, so you gain 1 memory.",
]

class BT3_088 extends Card:
	func _init():
		name = "LadyDevimon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-088"
		play_cost = 8
		level = 5
		stage_level = Stage.ULTIMATE
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 3
		digivolve_level = 4
		digimon_type = "Fallen Angel"
		power = 8000
		effect_text = "[When Digivolved] Trigger [Draw 2]. Then, trash 2 cards in your hand."
		inherited_effect_text = "[Your Turn] [Once Per Turn] When you use an Option card, delete 1 of your opponent's level 3 Digimon."
		ruling = [
					"I use this card's inherited effect to delete an opponent's level 3 Digimon. Does this happen before or after resolving the Option card?",
					"It happens after resolving the Option card's effect.",
					"I use an Option card with [De-Digivolve |], like [Spider Shooter], to reduce an opponent's level 4 or greater Digimon to level 3. Can I then use this card's inherited effect to delete that Digimon?",
					"Yes, as long as the opponent's Digimon is level 3 at the time the Option card's effect resolves, you can delete it with this card's inherited effect.",
]

class BT3_089 extends Card:
	func _init():
		name = "Boltmon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-089"
		play_cost = 10
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.DATA
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 2
		digivolve_level = 5
		digimon_type = "Cyborg"
		power = 12000

class BT3_090 extends Card:
	func _init():
		name = "Mastemon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.SR
		id = "BT3-090"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.YELLOW
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Angel"
		power = 12000
		effect_text = "[When Digivolved] Trash 1 card from the top of both players' security stacks. Then, play 1 purple or yellow Digimon card with a level of 4 or less from your trash without paying its memory cost."
		ruling = [
					"If I don't have a level 4 or lower purple or yellow Digimon card in my trash, do both players still trash the top card of their security stack from this card's [When Digivolved] effect?",
					"Yes, they do.",
					"Do the [Security] effects on cards trashed by this card's [When Digivolved] effect activate?",
					"No, they don't.",
					"If I activate this card's [When Digivolved] effect when my opponent has an empty security stack, do I win the game?",
					"No, just because there are no security cards to trash doesn't mean you win the game.",
					"If either or both players have empty security stacks, can I use this card's [When Digivolved] effect to play a level 4 or lower purple or yellow Digimon card from my trash?",
					"Yes, you can.",
]

class BT3_090_B extends Card:
	func _init():
		name = "Mastemon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.SR
		id = "BT3-090 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VACCINE
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 4
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.YELLOW
		digivolve_cost_2 = 4
		digivolve_level_2 = 5
		digimon_type = "Angel"
		power = 12000
		effect_text = "[When Digivolved] Trash 1 card from the top of both players' security stacks. Then, play 1 purple or yellow Digimon card with a level of 4 or less from your trash without paying its memory cost."
		ruling = [
					"If I don't have a level 4 or lower purple or yellow Digimon card in my trash, do both players still trash the top card of their security stack from this card's [When Digivolved] effect?",
					"Yes, they do.",
					"Do the [Security] effects on cards trashed by this card's [When Digivolved] effect activate?",
					"No, they don't.",
					"If I activate this card's [When Digivolved] effect when my opponent has an empty security stack, do I win the game?",
					"No, just because there are no security cards to trash doesn't mean you win the game.",
					"If either or both players have empty security stacks, can I use this card's [When Digivolved] effect to play a level 4 or lower purple or yellow Digimon card from my trash?",
					"Yes, you can.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_091 extends Card:
	func _init():
		name = "Lilithmon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.SR
		id = "BT3-091"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Demon Lord"
		power = 11000
		effect_text = "[When Digivolved] If you have 10 or more cards in your trash, you may return up to 2 purple Option cards from your trash to your hand.\n[Your Turn] [Once Per Turn] When you use an Option card, gain 2 memory."
		ruling = [
					"Do I gain +2 memory from  this card's [Your Turn] effect before or after resolving the Option card's effect?",
					"You gain the memory after  resolving the Option card's effect.",
					"I activate [Heat Viper] to destroy Lilithmon and my opponent's Digimon. Does Lilithmon's effect activate?",
					"Yes Lilithmon's effect activates, Lilithmon's effect activates when you use option. It is queued on the activation of the option.",
					"I activate [Trident Revolver] with Lilithmon on board, I played a Tamer with a [On Play] effect and deleted a Digimon with an [On Deletion] effect. What effects go first?",
					"After resolving [Trident Revolver] Lilithmon's effect triggered first and goes first. Next the [On Play] and [On Deletion] triggered at the same time, the turn player chooses their [On Play] effect to go first. The opposing player then uses [On Deletion].",
					"I activate [Heat Viper] to destroy Lilithmon and my opponent's Digimon. Does Lilithmon's effect activate?",
					"Lilithmon's effect activates when you use option after the option finishes resolving. It is not queued on the activation of the option.",
]

class BT3_091_B extends Card:
	func _init():
		name = "Lilithmon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.SR
		id = "BT3-091 (B)"
		play_cost = 12
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 3
		digivolve_level = 5
		digimon_type = "Demon Lord"
		power = 11000
		effect_text = "[When Digivolved] If you have 10 or more cards in your trash, you may return up to 2 purple Option cards from your trash to your hand.\n[Your Turn] [Once Per Turn] When you use an Option card, gain 2 memory."
		ruling = [
					"Do I gain +2 memory from  this card's [Your Turn] effect before or after resolving the Option card's effect?",
					"You gain the memory after  resolving the Option card's effect.",
					"I activate [Heat Viper] to destroy Lilithmon and my opponent's Digimon. Does Lilithmon's effect activate?",
					"Yes Lilithmon's effect activates, Lilithmon's effect activates when you use option. It is queued on the activation of the option.",
					"I activate [Trident Revolver] with Lilithmon on board, I played a Tamer with a [On Play] effect and deleted a Digimon with an [On Deletion] effect. What effects go first?",
					"After resolving [Trident Revolver] Lilithmon's effect triggered first and goes first. Next the [On Play] and [On Deletion] triggered at the same time, the turn player chooses their [On Play] effect to go first. The opposing player then uses [On Deletion].",
					"I activate [Heat Viper] to destroy Lilithmon and my opponent's Digimon. Does Lilithmon's effect activate?",
					"Lilithmon's effect activates when you use option after the option finishes resolving. It is not queued on the activation of the option.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_092 extends Card:
	func _init():
		name = "MaloMyotismon"
		type = Type.DIGIMON
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-092"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.PURPLE
		digivolve_cost = 5
		digivolve_level = 5
		digimon_type = "Demon Lord"
		power = 12000
		effect_text = "[Piercing].\n [All Turns] When another Digimon is deleted, gain 1 memory per Digimon deleted."
		ruling = [
					"I have this Digimon in play when one of my other Digimon attacks, deletes an opponent's Digimon, and is deleted in return. Do I gain two memory?",
					"Yes, both you and your opponent's Digimon were deleted, so you gain two memory.",
					"Do I gain 1 memory from this Digimon's effect when a Security Digimon is deleted?",
					"No, Security Digimon aren't considered to be Digimon, so you don't gain any memory.",
					"I have 2 of this Digimon in play when one of my other Digimon is deleted. Do I gain two memory?",
					"Yes, the +1 memory effect activates twice, earning you two memory.",
					"My opponent and I both have this Digimon in play. If another Digimon is deleted, what happens?",
					"The effects activate simultaneously, so the turn player gains a memory first, followed by the non-turn player gaining a memory, returning the memory gauge to its original position.",
					"If this Digimon attacks an opponent's Digimon and both Digimon end up being deleted, can I gain a memory off this card's effect?",
					"Yes, your opponent's Digimon was deleted, so you gain a memory. This is because even though both Digimon are deleted at the same time, the effect is triggered at the same time.",
					"My opponent attacks with a level 7 Digimon with [TiaLudomon] and [Growlmon]. What happens?",
					"If your opponent first [De-Digivolve |] this card with [TiaLudomon], this card has already moved to the trash, so even if you delete the Digimon with the effect of [Growlmon], and the effect of MaloMyotismon does not activate. If your opponent uses [Growlmon] before [TiaLudomon], you can use MaloMyotismon as it has already been triggered.",
]
		notes = "BelialVamdemon"

class BT3_093 extends Card:
	func _init():
		name = "Davis Motomiya"
		type = Type.TAMER
		color = ColorGroup.BLUE
		rarity = Rarity.R
		id = "BT3-093"
		play_cost = 4
		effect_text = "[Start of Your Turn] If you have 2 memory or less, set your memory to 3. \n [On Play] Reveal the top 3 cards of your deck. Add 1 blue and 1 green Digimon card among them to your hand. Place the remaining cards at the bottom of your deck in any order."
		sec_effect_text = "[Security] Play this card without paying its memory cost."
		notes = "Motomiya Daisuke"

class BT3_094 extends Card:
	func _init():
		name = "Ken Ichijoji"
		type = Type.TAMER
		color = ColorGroup.GREEN
		rarity = Rarity.R
		id = "BT3-094"
		play_cost = 4
		effect_text = "[Start of Your Turn] If you have 2 memory or less, set your memory to 3.\n[Your Turn] When one of your green or blue Digimon deletes an opponent's Digimon in battle and survives, you may suspend this Tamer to gain 1 memory."
		sec_effect_text = "[Security] Play this card without paying its memory cost."
		ruling = [
					"My green or blue Digimon deletes an opponent's Security Digimon in battle and survives. Can I suspend this Tamer to gain a memory?",
					"No, Security Digimon aren't considered to be Digimon, so this Tamer's effect doesn't activate.",
]

class BT3_095 extends Card:
	func _init():
		name = "Joe Kido"
		type = Type.TAMER
		color = ColorGroup.BLACK
		rarity = Rarity.R
		id = "BT3-095"
		play_cost = 2
		effect_text = "[Start of Your Turn] If you have a Digimon with [Blocker] in play, gain 1 memory."
		sec_effect_text = "[Security] Play this card without paying its memory cost."
		ruling = [
					"If I have multiple Digimon with [Blocker] in play, do I gain memory for each one?",
					"No. No matter how many Digimon with [Blocker] you have, you only gain 1 memory from this Tamer's effect.",
]

class BT3_096 extends Card:
	func _init():
		name = "Mimi Tachikawa"
		type = Type.TAMER
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-096"
		play_cost = 2
		effect_text = "[All Turns] When a player uses an Option card, you may suspend this Tamer to gain 1 memory."
		sec_effect_text = "[Security] Play this card without paying its memory cost."
		ruling = [
					"When do I gain a memory from this card's effect? Before I resolve an Option card, or after?",
					"After you resolve the Option card's effect.",
]

class BT3_097 extends Card:
	func _init():
		name = "A Delicate Plan"
		type = Type.OPTION
		color = ColorGroup.RED
		rarity = Rarity.U
		id = "BT3-097"
		play_cost = 1
		effect_text = "[Main] 1 of your Digimon gains \"This Digimon doesn't activate the [Security] effects of any Option cards it checks\" for the turn."
		sec_effect_text = "[Security] Add this card to your hand."
		ruling = [
					"Does this card's effect prevent the [Security] effects on checked Digimon and Tamer security cards from activating?",
					"No, this card only prevents the [Security] effects on Option cards from being activated. [Security] effects on Digimon and Tamer cards activate as normal.",
]

class BT3_098 extends Card:
	func _init():
		name = "Plasma Stake"
		type = Type.OPTION
		color = ColorGroup.RED
		rarity = Rarity.C
		id = "BT3-098"
		play_cost = 4
		effect_text = "[Main] Delete 1 of your opponent's Digimon with 13000 DP or more."
		sec_effect_text = "[Security] Activate this card's [Main] effect."

class BT3_099 extends Card:
	func _init():
		name = "We Have to Stop Fighting!"
		type = Type.OPTION
		color = ColorGroup.BLUE
		rarity = Rarity.U
		id = "BT3-099"
		play_cost = 2
		effect_text = "[Main] Neither player's Digimon can be deleted in battle for the turn."
		sec_effect_text = "[Security] Add this card to your hand."
		ruling = [
					"Does this card's effect prevent my Digimon from being deleted when it loses a battle against my opponent's Security Digimon?",
					"Yes, it does.",
					"Does this card's effect prevent me from deleting an opponent's Digimon using a [When Attacking] effect?",
					"No, it only prevents Digimon from being deleted as a result of battle. [When Attacking] effects, other card effects, and being reduced to 0 DP will still delete Digimon as normal.",
]

class BT3_100 extends Card:
	func _init():
		name = "Death Parade Blaster"
		type = Type.OPTION
		color = ColorGroup.BLUE
		rarity = Rarity.C
		id = "BT3-100"
		play_cost = 3
		effect_text = "[Main] Trash up to 2 digivolution cards from the bottom of all of your opponent's Digimon. Then, if you have a green Digimon in play, suspend 1 of your opponent's Digimon with no digivolution cards."
		sec_effect_text = "[Security] Activate this card's [Main] effect."
		ruling = [
					"After using this card, I play a green Digimon. Can I suspend 1 of my opponent's Digimon with no digivolution cards?",
					"No, if you don't have a green Digimon in play when you resolve the card's effect, you can't resolve the part of the effect that requires you to have a green Digimon in play.",
]
		notes = "Desperado Blaster"

class BT3_101 extends Card:
	func _init():
		name = "Bifrost"
		type = Type.OPTION
		color = ColorGroup.YELLOW
		rarity = Rarity.C
		id = "BT3-101"
		play_cost = 3
		effect_text = "[Main] 1 of your opponent's Digimon gets -3000 DP and [Security Attack -1] until the end of your opponent's next turn."
		sec_effect_text = "[Security] 1 of your opponent's Digimon gets -3000 DP and [Security Attack -1] for the turn."

class BT3_102 extends Card:
	func _init():
		name = "Code Cracking"
		type = Type.OPTION
		color = ColorGroup.YELLOW
		rarity = Rarity.U
		id = "BT3-102"
		play_cost = 4
		effect_text = "[Main] Your opponent may trash their top security card. If they don't, trigger [Recovery +]."
		ruling = [
					"When using this card, does my opponent get to decide whether or not they trash one of their security cards?",
					"Yes, your opponent chooses. If they decide not to trash any security cards, the player who used this card receives the benefits of the [Recovery +1] effect.",
					"Can I use this card if my opponent's security stack is empty?",
					"Yes, you can. Your opponent doesn't have a security card to trash, which means you get the [Recovery +1] effect automatically.",
]
		notes = "Cracker!!"

class BT3_103 extends Card:
	func _init():
		name = "Hidden Potential Discovered!"
		type = Type.OPTION
		color = ColorGroup.GREEN
		rarity = Rarity.U
		id = "BT3-103"
		play_cost = 0
		effect_text = "[Main] The next time one of your green Digimon digivolves this turn, you may suspend 1 of your Digimon to reduce the memory cost of the digivolution by 5."
		sec_effect_text = "[Security] Add this card to your hand."
		ruling = [
					"Can I digivolve from a Digimon that was suspended by this card's effect?",
					"Yes, you can.",
					"During the same turn I used this card, I digivolve a nongreen Digimon into a green Digimon. Can I use this card's effect to reduce the digivolution cost?",
					"No, this card's effect only applies when digivolving a Digimon that's already green.",
					"During the same turn I used this card, I digivolve a green Digimon into a non-green Digimon. Can I use this card's effect to reduce the digivolution cost?",
					"Yes, you can. As long as you're digivolving from a green Digimon, the effect applies.",
					"Does activating this card's effect also reduce the digivolution cost of cards in my breeding area?",
					"No, it doesn't. Since the card doesn't specify breeding areas, the effect doesn't apply to Digimon there.",
]

class BT3_104 extends Card:
	func _init():
		name = "Positron Laser"
		type = Type.OPTION
		color = ColorGroup.GREEN
		rarity = Rarity.C
		id = "BT3-104"
		play_cost = 6
		effect_text = "[Main] Up to 2 of your opponent's Digimon can't attack or block until the end of your opponent's next turn. Then, if you have a blue Digimon in play, return 1 of your opponent's suspended Digimon to their hand. (Trash all of its digivolution cards.)"
		sec_effect_text = "[Security] Up to 2 of your opponent's Digimon can't attack for the turn. Then, if you have a blue Digimon in play, return 1 of your opponent's suspended Digimon to its owner's hand. (Trash all of its digivolution cards.)"
		ruling = [
					"If I activate this card, then play a blue Digimon later in the turn, can I return an opponent's suspended Digimon to its owner's hand?",
					"No, if you don't have a blue Digimon in play when you resolve the card's effect, you can't resolve the part of the effect that returns your opponent's suspended Digimon to their hand.",
]

class BT3_105 extends Card:
	func _init():
		name = "Breath of the Gods"
		type = Type.OPTION
		color = ColorGroup.BLACK
		rarity = Rarity.R
		id = "BT3-105"
		play_cost = 2
		effect_text = "[Main] 1 of your Digimon gains [Reboot] and \"This Digimon can't have its DP reduced or be returned to its owner's hand or deck\" until the end of your opponent's next turn."
		sec_effect_text = "[Security] Your opponent's Digimon can't attack players for the turn."
		ruling = [
					"My opponent activates this card's security effect. Can I attack my opponent's security stack?",
					"No, you can't.",
					"I activate [Mega Digimon Fusion!] and [Breath of the Gods] on a Digimon with [Reboot] then digivolve the Digimon with [Reboot] into a level 7 Digimon, does the level 7 Digimon return to the bottom of the deck at the end of the turn?",
					"No, it does not return to the bottom of the deck because Breath of the Gods prevent it from happening.",
]
		notes = "God Bless"

class BT3_106 extends Card:
	func _init():
		name = "Beast Cyclone"
		type = Type.OPTION
		color = ColorGroup.BLACK
		rarity = Rarity.C
		id = "BT3-106"
		play_cost = 3
		effect_text = "[Main] All of your Digimon with [Blocker] or [Reboot] gain [Security Attack +1] for the turn."
		sec_effect_text = "[Security] Add this card to your hand."
		ruling = [
					"Can this card give [Security Attack +2] to a Digimon with both [Blocker] and [Reboot]?",
					"No. Even if the Digimon has both [Blocker] and [Reboot], the card's effect can only be used once to grant [Security Attack +1].",
					"I use this card's effect to give [Security Attack +1] to one of my Digimon, but if digivolution and <De-Digivolution> causes that Digimon to lose either [Blocker] or [Reboot], what happens to the [Security Attack +1]?",
					"Even if the Digimon loses [Blocker] or [Reboot], the effect from this card grants [Security Attack +1] for the entire duration of the turn.",
					"I have a Digimon without either [Blocker] or [Reboot]. If I digivolve into a Digimon with [Blocker] or [Reboot], does it gain [Security Attack +1]?",
					"Yes, it gives [Security Attack +1] to new Digimon that get [Blocker] or [Reboot] during the turn.",
					"I have a Digimon with [Blocker] or [Reboot]. If it loses one of the effects, does it keep the [Security Attack +1]?",
					"No, it loses the [Security Attack +1] when it loses [Blocker] or [Reboot].",
]

class BT3_107 extends Card:
	func _init():
		name = "Looking Back on the Good Times"
		type = Type.OPTION
		color = ColorGroup.BLACK
		rarity = Rarity.U
		id = "BT3-107"
		play_cost = 4
		effect_text = "[Main] Trigger [De-Digivolve 1]. Then, if that Digimon's play cost is 4 or less, delete it."
		sec_effect_text = "[Security] Add this card to your hand."
		ruling = [
					"I use this card on one of  my opponent's Digimon with a play cost of 5 or more, and [De-Digivolve 1] causes it to become a Digimon with a play cost of 4. Can I use this card's effect to delete that Digimon?",
					"Yes, if [De-Digivolve 1] causes it to become a Digimon with a play cost of 4 or less, you can delete it.",
					"Can I use this card to delete an opponent's Digimon with a play cost of 4 or less that doesn't have any digivolution cards, or on an opponent's level 3 Digimon?",
					"Yes, you can.",
]

class BT3_108 extends Card:
	func _init():
		name = "Dark Despair"
		type = Type.OPTION
		color = ColorGroup.PURPLE
		rarity = Rarity.R
		id = "BT3-108"
		play_cost = 2
		effect_text = "[Main] 1 of your Digimon gains [Retaliation] until the end of your opponent's next turn."
		sec_effect_text = "[Security] Add this card to your hand."

class BT3_109 extends Card:
	func _init():
		name = "Back for Revenge!"
		type = Type.OPTION
		color = ColorGroup.PURPLE
		rarity = Rarity.U
		id = "BT3-109"
		play_cost = 2
		effect_text = "[Main] 1 of your Digimon gains “ [On Deletion] Play this card without paying its memory cost. Any [On Play] effects on Digimon played with this effect don't activate” for the turn."
		ruling = [
					"One of my Digimon affected by this card was deleted. What happens to its digivolution cards?",
					"Its digivolution cards don't return to play, and remain in the trash.",
					"When a Digimon affected by this card comes back into play after being deleted, does it retain any effects that were on it prior to deletion?",
					"It loses all effects.",
					"When a Digimon affected by this card comes back into play after being deleted, can it attack that same turn?",
					"No, it's considered to have just entered play, so it can't attack.",
					"I use [Back for Revenge!] on [Ophanimon] and it gets deleted with [Heat Viper]. What happens?",
					"The player chooses which effect to use first between [Back for Revenge!] and [Ophanimon]. If Ophanimon is used first Back for Revenge cannot be used. If Back for Revenge is used for then Ophanimon can no longer be used.",
]

class BT3_110 extends Card:
	func _init():
		name = "Necrophobia"
		type = Type.OPTION
		color = ColorGroup.PURPLE
		rarity = Rarity.C
		id = "BT3-110"
		play_cost = 5
		effect_text = "[Main] Play 1 level 5 purple Digimon card from your trash without paying its memory cost. Any [On Play] effects on Digimon played with this effect don't activate."
		sec_effect_text = "[Security] Activate this card's [Main] effect."

class BT3_111 extends Card:
	func _init():
		name = "Imperialdramon Dragon Mode"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.SEC
		id = "BT3-111"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 5
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.BLUE
		digivolve_cost_2 = 5
		digivolve_level_2 = 5
		digimon_type = "Ancient Dragon"
		power = 12000
		effect_text = "When one of your [Paildramon] or [Dinobeemon] would digivolve into this card in your hand, reduce the memory cost of the digivolution by 2.\n[Piercing].\n[Your Turn] [Once Per Turn] When this Digimon deletes an opponent's Digimon in battle and survives, unsuspend this Digimon."
		ruling = [
					"When digivolving this card onto a [Paildramon] or [Dinobeemon] in my breeding area, can I reduce the digivolution cost by 2?",
					"No. You can't activate this effect when digivolving a card in your breeding area.",
					"I digivolve [Paildramon] into this card and attack with it deleting an opponent's in battle and surviving. I unsuspend it with its own effect. When I attack again, can I use [Paildramon]'s effect to unsuspend it?",
					"No, [Paildramon]'s inherited effect is compulsory like [Imperialdramon Dragon Mode] so it cannot put this card to active as the effect was already \"spent\" on the 1st attack.",
]

class BT3_111_B extends Card:
	func _init():
		name = "Imperialdramon Dragon Mode"
		type = Type.DIGIMON
		color = ColorGroup.GREEN
		rarity = Rarity.SEC
		id = "BT3-111 (B)"
		play_cost = 13
		level = 6
		stage_level = Stage.MEGA
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.GREEN
		digivolve_cost = 5
		digivolve_level = 5
		digivolve_color_2 = ColorGroup.BLUE
		digivolve_cost_2 = 5
		digivolve_level_2 = 5
		digimon_type = "Ancient Dragon"
		power = 12000
		effect_text = "When one of your [Paildramon] or [Dinobeemon] would digivolve into this card in your hand, reduce the memory cost of the digivolution by 2.\n[Piercing].\n[Your Turn] [Once Per Turn] When this Digimon deletes an opponent's Digimon in battle and survives, unsuspend this Digimon."
		ruling = [
					"When digivolving this card onto a [Paildramon] or [Dinobeemon] in my breeding area, can I reduce the digivolution cost by 2?",
					"No. You can't activate this effect when digivolving a card in your breeding area.",
					"I digivolve [Paildramon] into this card and attack with it deleting an opponent's in battle and surviving. I unsuspend it with its own effect. When I attack again, can I use [Paildramon]'s effect to unsuspend it?",
					"No, [Paildramon]'s inherited effect is compulsory like [Imperialdramon Dragon Mode] so it cannot put this card to active as the effect was already \"spent\" on the 1st attack.",
]
		is_parallel = true
		notes = "parallel promo"

class BT3_112 extends Card:
	func _init():
		name = "Omnimon Alter-S"
		type = Type.DIGIMON
		color = ColorGroup.WHITE
		rarity = Rarity.SEC
		id = "BT3-112"
		play_cost = 15
		level = 7
		stage_level = ""
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 6
		digivolve_level = 6
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 6
		digivolve_level_2 = 6
		digimon_type = "Holy Warrior"
		power = 15000
		effect_text = "[When Digivolved] Trigger [De-Digivolve 1]. Then, delete all of your opponent's Digimon with 5000 DP or less. \n[When Attacking] You may make this Digimon unblockable by your opponent for the turn by returning one of its level 6 digivolution cards to your hand."
		notes = "Omegamon Alter-S"

class BT3_112_B extends Card:
	func _init():
		name = "Omnimon Alter-S"
		type = Type.DIGIMON
		color = ColorGroup.WHITE
		rarity = Rarity.SEC
		id = "BT3-112 (B)"
		play_cost = 15
		level = 7
		stage_level = ""
		attribute = Attribute.VIRUS
		digivolve_color = ColorGroup.RED
		digivolve_cost = 6
		digivolve_level = 6
		digivolve_color_2 = ColorGroup.BLACK
		digivolve_cost_2 = 6
		digivolve_level_2 = 6
		digimon_type = "Holy Warrior"
		power = 15000
		effect_text = "[When Digivolved] Trigger [De-Digivolve 1]. Then, delete all of your opponent's Digimon with 5000 DP or less. \n[When Attacking] You may make this Digimon unblockable by your opponent for the turn by returning one of its level 6 digivolution cards to your hand."
		is_parallel = true
		notes = "parallel promo Omegamon Alter-S"

